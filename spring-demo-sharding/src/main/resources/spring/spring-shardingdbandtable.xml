<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:context="http://www.springframework.org/schema/context" 
    xmlns:tx="http://www.springframework.org/schema/tx" 
    xmlns:sharding="http://shardingsphere.io/schema/shardingsphere/sharding"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
                        http://www.springframework.org/schema/beans/spring-beans.xsd 
                        http://www.springframework.org/schema/tx 
                        http://www.springframework.org/schema/tx/spring-tx.xsd
                        http://www.springframework.org/schema/context 
                        http://www.springframework.org/schema/context/spring-context.xsd
                        http://shardingsphere.io/schema/shardingsphere/sharding 
                        http://shardingsphere.io/schema/shardingsphere/sharding/sharding.xsd">
     <!-- 分表又分库 实例 --> 
    <context:component-scan base-package="io.shardingsphere.example.spring.namespace.mybatis" />
    
    <bean id="demo_ds_master0" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
        <property name="driverClassName" value="com.mysql.jdbc.Driver"/>
        <property name="url" value="jdbc:mysql://localhost:3306/demo_ds_slave_0"/>
        <property name="username" value="root"/>
        <property name="password" value="123456"/>
    </bean>
    
    <bean id="demo_ds_master1" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
        <property name="driverClassName" value="com.mysql.jdbc.Driver"/>
        <property name="url" value="jdbc:mysql://localhost:3306/demo_ds_slave_1"/>
        <property name="username" value="root"/>
        <property name="password" value="123456"/>
    </bean>
   
   
    <bean id="preciseModuloTableShardingAlgorithm" class="com.victory.sharding.algorithm.PreciseModuloTableShardingAlgorithm" />
    <bean id="preciseModuloDatabaseShardingAlgorithm" class="com.victory.sharding.algorithm.PreciseShardingDataBaseAlgorithmImpl" />
    
    <!-- 按照user_id 这一列进行判断，采用 preciseModuloTableShardingAlgorithm 策略 进行 分库（注意 user_id的class类型）-->
    <sharding:standard-strategy id="databaseShardingStrategy" sharding-column="user_id" precise-algorithm-ref="preciseModuloDatabaseShardingAlgorithm" />
        <!-- 按照user_id 这一列进行判断，采用 preciseModuloTableShardingAlgorithm 策略 进行 分表  （注意 order_id的class类型）-->
    <sharding:standard-strategy id="orderItemTableShardingStrategy" sharding-column="order_id" precise-algorithm-ref="preciseModuloTableShardingAlgorithm" />
    
    <sharding:data-source id="dataSource">
        <sharding:sharding-rule data-source-names="demo_ds_master0,demo_ds_master1">
            <sharding:table-rules>
                <!-- 指定 数据库和 表之间的匹配方式（名称规则、支持表达式的方式）
                  $ 等价于  $->
                  ${begin..end}表示范围区间
                  ${[unit1, unit2, unit_x]}表示枚举值
                  ${['online', 'offline']}_table${1..3}   等价于  online_table1, online_table2, online_table3, offline_table1, offline_table2, offline_table3
                  -->
                <sharding:table-rule logic-table="t_order" actual-data-nodes="demo_ds_master$->{0..1}.t_order_$->{0..1}" table-strategy-ref="databaseShardingStrategy" generate-key-column-name="order_id" />
                <sharding:table-rule logic-table="t_order_item" actual-data-nodes="demo_ds_master$->{0..1}.t_order_item_$->{0..1}" table-strategy-ref="orderItemTableShardingStrategy" generate-key-column-name="order_item_id" />
            </sharding:table-rules>
            <sharding:binding-table-rules>
                <sharding:binding-table-rule logic-tables="t_order, t_order_item"/>
            </sharding:binding-table-rules>
        </sharding:sharding-rule>
    </sharding:data-source>
    
   
</beans>
